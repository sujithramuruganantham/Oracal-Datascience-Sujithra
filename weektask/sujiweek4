{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMF7BcqpVwdNDc4TW7YJoJs"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-1lIIYneHn2x","executionInfo":{"status":"ok","timestamp":1743240221094,"user_tz":-330,"elapsed":32,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"6cbe4247-4b6e-4011-d3af-95f6fa945b83"},"outputs":[{"output_type":"stream","name":"stdout","text":["name    0\n","dtype: int64\n"]}],"source":["import pandas as pd\n","# sample DataFrame with missing values\n","data = {'name':['john','alice','maria']}\n","df=pd.DataFrame(data)\n","# check for missing values in the DataFrame\n","print(df.isnull().sum())"]},{"cell_type":"code","source":["df_cleaned=df.dropna()\n","print(df_cleaned)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UA-XjZhsItud","executionInfo":{"status":"ok","timestamp":1743240350004,"user_tz":-330,"elapsed":115,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"290b36ea-1106-4738-cdae-530c4a230f92"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["    name\n","0   john\n","1  alice\n","2  maria\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","#sample DataFrame with missing values\n","data={\"Age\":[25,30,None,22,None],\"Marks\":[80,None,75,90,85],\"Attendance\":[90,None,85,95,None]}\n","df=pd.DataFrame(data)\n","df[\"Age\"].fillna(df[\"Age\"].mean(),inplace=True)\n","df[\"Marks\"].fillna(df[\"Marks\"].median(),inplace=True)\n","df[\"Attendance\"].fillna(df[\"Attendance\"].mean(),inplace=True)\n","# Print the DataFrame after filling missing Values\n","print(df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bkEJanwJItrR","executionInfo":{"status":"ok","timestamp":1743244714500,"user_tz":-330,"elapsed":92,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"1f7faa1f-29c8-4af1-cec0-bf565ba4fe88"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["         Age  Marks  Attendance\n","0  25.000000   80.0        90.0\n","1  30.000000   82.5        90.0\n","2  25.666667   75.0        85.0\n","3  22.000000   90.0        95.0\n","4  25.666667   85.0        90.0\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-20-3b0958d30a15>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Age\"].fillna(df[\"Age\"].mean(),inplace=True)\n","<ipython-input-20-3b0958d30a15>:6: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Marks\"].fillna(df[\"Marks\"].median(),inplace=True)\n","<ipython-input-20-3b0958d30a15>:7: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Attendance\"].fillna(df[\"Attendance\"].mean(),inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","data={\"Student\":[\"John\",\"Alice\",\"Bob\",\"Maria\",\"Peter\"],\"Passed\":[\"Yes\",\"No\",None,\"yes\",None]}\n","df=pd.DataFrame(data)\n","df[\"Passed\"].fillna(df[\"Passed\"].mode()[0],inplace=True)\n","print(df)"],"metadata":{"id":"BrOpd6AVItQ5","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743245538449,"user_tz":-330,"elapsed":471,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"8b8b2d08-c0b3-4e36-83c8-0508522eb17f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["  Student Passed\n","0    John    Yes\n","1   Alice     No\n","2     Bob     No\n","3   Maria    yes\n","4   Peter     No\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-24-35bad3f57c66>:4: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df[\"Passed\"].fillna(df[\"Passed\"].mode()[0],inplace=True)\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","data={\"Name\":[\"John\",\"Alice\",\"Bob\",\"Maria\",\"Peter\"],\"Age\":[25,None,30,None,22],\"Marks\":[80,None,75,90,None]}\n","df=pd.DataFrame(data)\n","# Before filling missing values\n","print(\"Before Forward Fill and Backward Fill:\")\n","print(df)\n","# Forward Fill\n","df.ffill(inplace=True)\n","# After forward fil\n","print(\"\\n After Forward fill:\")\n","print(df)\n","# recreate the orginal DataFrame for demonstration\n","df=pd.DataFrame(data)\n","# Backward Fill\n","df.bfill(inplace=True)\n","# After Backward Fill\n","print(\"\\n After Backward Fill:\")\n","print(df)\n","\n","\n"],"metadata":{"id":"2VsB6paVIstS","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743315301697,"user_tz":-330,"elapsed":595,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"ac528e1b-2d91-4e3c-8523-5665444caf8a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before Forward Fill and Backward Fill:\n","    Name   Age  Marks\n","0   John  25.0   80.0\n","1  Alice   NaN    NaN\n","2    Bob  30.0   75.0\n","3  Maria   NaN   90.0\n","4  Peter  22.0    NaN\n","\n"," After Forward fill:\n","    Name   Age  Marks\n","0   John  25.0   80.0\n","1  Alice  25.0   80.0\n","2    Bob  30.0   75.0\n","3  Maria  30.0   90.0\n","4  Peter  22.0   90.0\n","\n"," After Backward Fill:\n","    Name   Age  Marks\n","0   John  25.0   80.0\n","1  Alice  30.0   75.0\n","2    Bob  30.0   75.0\n","3  Maria  22.0   90.0\n","4  Peter  22.0    NaN\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","# Sample DataFrame with duplicate rows\n","data={\"Name\":[\"John\",\"Alice\",\"bob\",\"John\",\"Alice\",\"Bob\",\"Maria\"],\"Age\":[25,30,22,20,22,25,28],\"Marks\":[80,85,75,85,75,80,90]}\n","df=pd.DataFrame(data)\n","# Before removing duplicates\n","print(\"Before removing duplicates:\")\n","print(df)\n","# Removr duplicates (inplace)\n","df.drop_duplicates(inplace=True)\n","# After removing duplicates\n","print(\"\\n After removing duplicates:\")\n","print(df)\n","\n"],"metadata":{"id":"gUkXrJ1tIsnk","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1743316285465,"user_tz":-330,"elapsed":135,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"f416af6d-c3e5-4fbb-abf4-f6b8e7293eb6"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Before removing duplicates:\n","    Name  Age  Marks\n","0   John   25     80\n","1  Alice   30     85\n","2    bob   22     75\n","3   John   20     85\n","4  Alice   22     75\n","5    Bob   25     80\n","6  Maria   28     90\n","\n"," After removing duplicates:\n","    Name  Age  Marks\n","0   John   25     80\n","1  Alice   30     85\n","2    bob   22     75\n","3   John   20     85\n","4  Alice   22     75\n","5    Bob   25     80\n","6  Maria   28     90\n"]}]},{"cell_type":"code","source":["import pandas as pd\n","from sklearn.preprocessing\n","import StandardScaler,MinMaxScaler,ScalerStandard\n","# Sample DataFrame\n","data={\"Name\":[\"John\",\"Alice\",\"Bob\",\"Maria\",\"Peter\"],\"Marks\":[80,85,75,90,95],\"Attendance\":[85,90,88,92,80]}\n","df=pd.DataFrame(data)\n","# Standardization(Z-score Normalization)\n","# scaler_standard=StandardScaler()\n","df_standard_scaled=df.copy()\n","# Copy the DataFrame for scaling\n","df_standard_scaled[[\"Marks\",\"Attendance\"]]=Standard_Scaler.fit_transform(df[[\"Marks\",\"Attendance\"]])\n","# Mim-Max Scaling scaler_MinMaxScaler()\n","df_minmax_scaled=df.copy()\n","df_minmax_scaled[[\"Marks\",\"Attendance\"]]=Scaler_MinMax.fit_transform(df[[\"Marks\",\"Attendance\"]])\n","# Disply the results\n","print(\"\\n Standardized DataFrame(Z-score Normalization):\")\n","print(df_standard_scaled)\n","print(\"\\n Min-Max Scaled DataFrame:\")\n","print(df_mimmax_scaled)"],"metadata":{"id":"z89VFLp5H1g2","colab":{"base_uri":"https://localhost:8080/","height":106},"executionInfo":{"status":"error","timestamp":1745298195340,"user_tz":-330,"elapsed":78,"user":{"displayName":"Sujithra Muruganantham","userId":"03244084556517055698"}},"outputId":"a54f9157-089f-4598-e95d-17398555d642"},"execution_count":2,"outputs":[{"output_type":"error","ename":"SyntaxError","evalue":"invalid syntax (<ipython-input-2-63cc121f7b44>, line 2)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-63cc121f7b44>\"\u001b[0;36m, line \u001b[0;32m2\u001b[0m\n\u001b[0;31m    from sklearn.preprocessing\u001b[0m\n\u001b[0m                               ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"6U5uBEUs4e5K"},"execution_count":null,"outputs":[]}]}